name: Scan, Build, & Publish
env:
  tag: ${{github.ref_name}}
  binary_name: kubectm

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
    paths:
      - "**.go"
      - ".github/workflows/build.yml"
  pull_request:
    branches: [ "main" ] # Only run on pull requests to main
  workflow_dispatch: # Triggered manually

permissions: read-all

jobs:
  scan: # Check for vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # Uncomment the following step to upload the result to GitHub Code Scanning
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  args:
    if: startsWith(github.ref, 'refs/tags/v') && github.ref_name == 'main' # Only run on meaningful update
    
    runs-on: ubuntu-latest
    needs: scan # Depends on the security job, don't run until it's done.
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
      binary-name: ${{ env.binary_name }}
    steps:
      - id: checkout # Checkout
        uses: actions/checkout@v4 
        with:
          fetch-depth: 0
      - id: setup-go # Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod' # Use the go.mod file
          check-latest: true
          cache-dependency-path: |
                  ./go.sum
                  ./go.mod
      - id: ldflags # Create the LDFLAGS
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "version=$(git describe --tags --always --dirty | cut -c2-)" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"

  build:
      if: startsWith(github.ref, 'refs/tags/v') && github.ref_name == 'main' # Only run on meaningful update
      permissions:
        id-token: write # To sign the provenance.
        contents: write # To upload assets to release.
        actions: read # To read the workflow path.
      needs: args # Depends on the args job.
      strategy: # Build strategy
        fail-fast: true # Anything fails, fail everything
        matrix:
          goos: [linux, darwin, windows]
          goarch: [amd64, arm64]
      uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.0.0
      with:
        go-version-file: './go.mod' # Use the go.mod file
        upload-assets: false # Upload assets to release
        upload-tag-name: ${{ github.ref_name }}
        config-file: .slsa-goreleaser/${{ matrix.os }}-${{ matrix.arch }}.yml
        evaluated-envs: "BINARY_NAME:${{ needs.args.outputs.binary-name }},COMMIT_DATE:${{ needs.args.outputs.commit-date }}, COMMIT:${{ needs.args.outputs.commit }}, VERSION:${{ needs.args.outputs.version }}, TREE_STATE:${{ needs.args.outputs.tree-state }}"

