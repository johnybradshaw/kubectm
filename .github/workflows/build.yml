name: Scan, Build, & Publish

env:
  tag: ${{ github.ref_name }}
  binary_name: kubectm

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
    paths:
      - "**.go"
      - ".github/workflows/build.yml"
  pull_request:
    branches:
      - 'main' # Only run on pull requests to main
  workflow_dispatch: # Triggered manually

permissions: read-all

jobs:
  scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
    steps:
      - uses: actions/checkout@v4
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

      # - name: Setup Go environment
      #   uses: actions/setup-go@v5.0.2        

        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

  args:
    runs-on: ubuntu-latest
    needs: scan # Depends on the security job, don't run until it's done.
    # if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
      binary-name: ${{ env.binary_name }}
    steps:
      - id: checkout # Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: setup-go # Setup Go
        uses: actions/setup-go@v5.0.2
        with:
          go-version-file: './go.mod' # Use the go.mod file
          check-latest: true
          cache-dependency-path: |
            ./go.sum
            ./go.mod
      - id: ldflags # Create the LDFLAGS
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "version=$(git describe --tags --always --dirty | cut -c2-)" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    # if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write # To sign the provenance.
      contents: write # To upload assets to release.
      actions: read # To read the workflow path.
    needs: args # Depends on the args job.
    strategy: # Build strategy
      fail-fast: true # Anything fails, fail everything
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Set up Go
      #   uses: actions/setup-go@v5.0.2
      #   with:
      #     go-version: '1.23'

      - name: Build binaries
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd

      # - name: Upload Binaries
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ env.binary_name }}-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
      #     path: ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}

      # - name: Create Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: ${{ env.binary_name }}-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}