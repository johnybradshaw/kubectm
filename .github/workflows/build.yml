name: Scan, Build, & Publish

env:
  tag: ${{ github.ref_name }}
  binary_name: kubectm

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
    paths:
      - "**.go"
      - ".github/workflows/build.yml"
  pull_request:
    branches:
      - 'main' # Only run on pull requests to main
  workflow_dispatch: # Triggered manually

permissions: read-all

jobs:
  scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
    steps:
      - uses: actions/checkout@v4

      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true

      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

  prepare-build:
    runs-on: ubuntu-latest
    needs: scan
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
      binary-name: ${{ env.binary_name }}
    steps:
      - id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: setup-go
        uses: actions/setup-go@v5.0.2
        with:
          go-version-file: './go.mod'
          check-latest: true
          cache-dependency-path: |
            ./go.sum
            ./go.mod

      - id: ldflags
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "version=$(git describe --tags --always --dirty | cut -c2-)" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo 'clean'; else echo 'dirty'; fi)" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write # To sign the provenance.
      contents: write # To upload assets to release.
      actions: read # To read the workflow path.
    needs: prepare-build
    strategy:
      fail-fast: true
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Build binaries
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ env.binary_name }} ./cmd
  
      - name: Archive Binary
        run: |
          zip -r ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip ${{ env.binary_name }}
  
      - name: Setup GPG
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-keys
  
      - name: Sign the Binary
        run: |
          gpg --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" --pinentry-mode loopback --detach-sign --armor --output ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip.sig ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
  
      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
            ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip.sig
  
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
            ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1.4.2
        with:
          subject-path: ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
