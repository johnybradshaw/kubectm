name: Create Release from Latest Builds

on:
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write # To upload assets to release.
  actions: read # To read the workflow path.

env:
  binary_name: kubectm

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To upload assets to release.
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
    outputs:
      version: ${{ steps.extract-version.outputs.version }} # Output version stripped of the 'v' prefix
      run-id: ${{ steps.list-runs.outputs.run-id }} # Output the latest successful run ID
    steps:
      - name: List All Workflow Runs
        id: list-runs
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build.yml', // Use the file name of your build workflow
              status: 'success', // Only get successful runs
              per_page: 10, // Get the latest 10 successful runs
            });

            // Filter runs to find the first one with a tag that starts with 'v'
            const run = runs.data.workflow_runs.find(run => run.head_branch && run.head_branch.startsWith('v'));
            
            if (!run) {
              throw new Error('No successful build.yml run with a tag starting with "v" was found.');
            }
            
            const run_id = run.id;
            const tag_name = run.head_branch; // Assuming the tag is in the head_branch

            core.setOutput('run-id', run_id); // Set the output variable for the run ID
            core.setOutput('tag-name', tag_name); // Set the output variable for the tag name
          result-encoding: string

      - name: Extract Version from Tag
        id: extract-version
        run: |
          # Extract the version by stripping the 'v' prefix from the tag
          TAG_NAME=${{ steps.list-runs.outputs.tag-name }}
          VERSION=${TAG_NAME#v} # Remove 'v' prefix
          echo "version=$VERSION" >> $GITHUB_OUTPUT # Output the stripped version

  release:
    needs: prepare-release # Required to get the version
    runs-on: ubuntu-latest
    permissions:
      contents: write # To upload assets to release.
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
    strategy:
      fail-fast: true
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Download Binary Artifacts
        id: download-binary-artifacts
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ needs.prepare-release.outputs.run-id }} # Correct reference for run-id output
          name: kubectm-${{ matrix.goos }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.goarch }}
          path: kubectm-${{ matrix.goos }}-${{ matrix.goarch }}/

      - name: Download Signing Keys
        id: download-signing-keys
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ needs.prepare-release.outputs.run-id }} # Correct reference for run-id output
          name: signing-keys
          path: signing-keys/

      - name: List Downloaded Files # For debugging
        id: list-downloaded-files
        run: ls -R

      - name: Create Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }} # Correct tag using the version
          generate_release_notes: true
          files: |
            kubectm-${{ matrix.goos }}-${{ matrix.goarch }}/kubectm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
            kubectm-${{ matrix.goos }}-${{ matrix.goarch }}/kubectm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip.sig
            signing-keys/*.asc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1.4.2
        with:
          subject-path: kubectm-${{ matrix.goos }}-${{ matrix.goarch }}/kubectm-${{ needs.prepare-release.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}