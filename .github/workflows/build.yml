name: Scan, Build, & Publish

env:
  tag: ${{ github.ref_name }}
  binary_name: kubectm

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
    paths:
      - "**.go"
      - ".github/workflows/build.yml"
  pull_request:
    branches:
      - 'main' # Only run on pull requests to main
  workflow_dispatch: # Triggered manually

permissions: read-all

jobs:
  scan: # Check for vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  args:
    runs-on: ubuntu-latest
    needs: scan # Depends on the security job, don't run until it's done.
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
      binary-name: ${{ env.binary_name }}
    steps:
      - id: checkout # Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: setup-go # Setup Go
        uses: actions/setup-go@v2
        with:
          go-version-file: './go.mod' # Use the go.mod file
          check-latest: true
          cache-dependency-path: |
            ./go.sum
            ./go.mod
      - id: ldflags # Create the LDFLAGS
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "version=$(git describe --tags --always --dirty | cut -c2-)" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write # To sign the provenance.
      contents: write # To upload assets to release.
      actions: read # To read the workflow path.
    needs: args # Depends on the args job.
    strategy: # Build strategy
      fail-fast: true # Anything fails, fail everything
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'

      - name: Build binaries
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd

      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.binary_name }}-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.binary_name }}-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.binary_name }}-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}